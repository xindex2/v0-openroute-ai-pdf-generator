import { type NextRequest, NextResponse } from "next/server"

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const filename = searchParams.get("filename")
    const type = searchParams.get("type")

    if (!filename || !type) {
      return NextResponse.json({ error: "Missing filename or type" }, { status: 400 })
    }

    // Create a simple text file as a placeholder
    let content = "This is a placeholder file content."
    let contentType = "application/octet-stream"

    if (type === "pdf") {
      contentType = "application/pdf"
      // In a real implementation, you would generate or retrieve the actual PDF file
      content =
        "%PDF-1.5\n1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\n2 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>\nendobj\n3 0 obj\n<< /Type /Page /Parent 2 0 R /Resources << /Font << /F1 4 0 R >> >> /MediaBox [0 0 612 792] /Contents 5 0 R >>\nendobj\n4 0 obj\n<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>\nendobj\n5 0 obj\n<< /Length 68 >>\nstream\nBT\n/F1 12 Tf\n100 700 Td\n(Document generated by docfa.st) Tj\nET\nendstream\nendobj\nxref\n0 6\n0000000000 65535 f\n0000000009 00000 n\n0000000058 00000 n\n0000000115 00000 n\n0000000234 00000 n\n0000000302 00000 n\ntrailer\n<< /Size 6 /Root 1 0 R >>\nstartxref\n421\n%%EOF"
    } else if (type === "docx") {
      contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
      // In a real implementation, you would generate or retrieve the actual DOCX file
      // For now, we'll just return a simple text file with a .docx extension
    }

    // Create a response with the content
    return new NextResponse(content, {
      headers: {
        "Content-Type": contentType,
        "Content-Disposition": `attachment; filename="${filename}"`,
      },
    })
  } catch (error) {
    console.error("Error in download API route:", error)
    return NextResponse.json({ error: "Failed to download file" }, { status: 500 })
  }
}
