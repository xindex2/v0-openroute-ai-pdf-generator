"use client"

// Import jsPDF directly
import { jsPDF } from "jspdf"

// Helper function to create a simple print window
function openPrintWindow(content: string, title = "Document"): void {
  const printWindow = window.open("", "_blank", "width=800,height=600")
  if (!printWindow) {
    alert("Please allow pop-ups to print the document")
    return
  }

  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          background-color: #ffffff;
        }
        h1, h2, h3, h4, h5, h6 {
          margin-top: 1.5em;
          margin-bottom: 0.5em;
        }
        p {
          margin-bottom: 1em;
        }
        table {
          border-collapse: collapse;
          width: 100%;
          margin-bottom: 1em;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
        }
        th {
          background-color: #f2f2f2;
        }
        @media print {
          body {
            padding: 0;
            margin: 0;
          }
        }
      </style>
    </head>
    <body>
      ${content}
      <script>
        // Auto-print when loaded
        window.onload = function() {
          setTimeout(() => {
            window.print();
          }, 500);
        };
      </script>
    </body>
    </html>
  `)

  printWindow.document.close()
}

// Text-based PDF export function
export async function generatePdf(contentElement: HTMLElement): Promise<Blob> {
  try {
    console.log("Starting PDF generation...")

    // Create a new jsPDF instance
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    })

    // Get the content as text and HTML
    const contentHtml = contentElement.innerHTML
    const contentText = contentElement.innerText || contentElement.textContent || ""

    // Extract title and headings
    const titleMatch = contentHtml.match(/<h1[^>]*>(.*?)<\/h1>/i)
    const title = titleMatch ? titleMatch[1].replace(/<[^>]*>/g, "").trim() : "Document"

    // Set PDF metadata
    pdf.setProperties({
      title: title,
      subject: "Generated Document",
      author: "docfa.st",
      keywords: "document, pdf, generated",
      creator: "docfa.st",
    })

    // Set font and size
    pdf.setFont("helvetica")
    pdf.setFontSize(12)

    // Parse HTML and add content to PDF
    const lines = contentText.split("\n")
    let y = 20 // Starting y position
    const pageWidth = pdf.internal.pageSize.getWidth()
    const margin = 20
    const lineHeight = 7

    // Add title
    pdf.setFontSize(18)
    pdf.setTextColor(46, 204, 113) // Green color
    pdf.text(title, margin, y)
    y += lineHeight * 2

    // Reset font for body text
    pdf.setFontSize(12)
    pdf.setTextColor(0, 0, 0)

    // Process each line
    for (const line of lines) {
      if (!line.trim()) {
        y += lineHeight / 2
        continue
      }

      // Check if we need a new page
      if (y > pdf.internal.pageSize.getHeight() - margin) {
        pdf.addPage()
        y = margin
      }

      // Split long lines
      const textLines = pdf.splitTextToSize(line, pageWidth - margin * 2)
      pdf.text(textLines, margin, y)
      y += lineHeight * textLines.length
    }

    // Add footer
    const pageCount = pdf.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i)
      pdf.setFontSize(10)
      pdf.setTextColor(150, 150, 150)
      pdf.text(
        `Generated by docfa.st - Page ${i} of ${pageCount}`,
        pageWidth / 2,
        pdf.internal.pageSize.getHeight() - 10,
        {
          align: "center",
        },
      )
    }

    console.log("PDF created successfully")

    // Convert to blob
    const pdfBlob = pdf.output("blob")
    return pdfBlob
  } catch (error) {
    console.error("Error in PDF generation:", error)

    // Fallback to print window method
    console.log("Falling back to print window method...")
    openPrintWindow(contentElement.innerHTML)

    // Return a simple PDF with a message
    const pdf = new jsPDF()
    pdf.text("Your document has been opened in a new window for printing.", 10, 10)
    pdf.text("Please use your browser's print function to save as PDF.", 10, 20)
    return pdf.output("blob")
  }
}

// Simple HTML to image conversion
export async function generateImage(contentElement: HTMLElement): Promise<Blob> {
  try {
    console.log("Starting image generation...")

    // Use the browser's built-in capabilities to render the content
    const canvas = document.createElement("canvas")
    const ctx = canvas.getContext("2d")

    if (!ctx) {
      throw new Error("Could not get canvas context")
    }

    // Set canvas dimensions
    canvas.width = 800
    canvas.height = 1200

    // Fill with white background
    ctx.fillStyle = "#ffffff"
    ctx.fillRect(0, 0, canvas.width, canvas.height)

    // Draw content as text
    ctx.font = "14px Arial"
    ctx.fillStyle = "#333333"

    // Get text content
    const text = contentElement.innerText || contentElement.textContent || ""
    const lines = text.split("\n")

    // Draw title
    const titleMatch = contentElement.innerHTML.match(/<h1[^>]*>(.*?)<\/h1>/i)
    const title = titleMatch ? titleMatch[1].replace(/<[^>]*>/g, "").trim() : "Document"

    ctx.font = "bold 24px Arial"
    ctx.fillStyle = "#2ECC71" // Green color
    ctx.fillText(title, 40, 50)

    // Draw body text
    ctx.font = "14px Arial"
    ctx.fillStyle = "#333333"

    let y = 80
    for (const line of lines) {
      if (!line.trim()) {
        y += 10
        continue
      }

      // Simple word wrapping
      const words = line.split(" ")
      let currentLine = ""

      for (const word of words) {
        const testLine = currentLine + word + " "
        const metrics = ctx.measureText(testLine)

        if (metrics.width > canvas.width - 80) {
          ctx.fillText(currentLine, 40, y)
          currentLine = word + " "
          y += 20
        } else {
          currentLine = testLine
        }
      }

      ctx.fillText(currentLine, 40, y)
      y += 20
    }

    // Add footer
    ctx.font = "12px Arial"
    ctx.fillStyle = "#999999"
    ctx.fillText("Generated by docfa.st", canvas.width / 2 - 60, canvas.height - 30)

    return new Promise((resolve, reject) => {
      try {
        canvas.toBlob((blob) => {
          if (blob) {
            console.log("Image blob created successfully")
            resolve(blob)
          } else {
            reject(new Error("Failed to convert canvas to blob"))
          }
        }, "image/png")
      } catch (error) {
        console.error("Error in canvas to blob conversion:", error)
        reject(error)
      }
    })
  } catch (error) {
    console.error("Error in image generation:", error)
    throw error
  }
}

// Simple HTML export
export function generateHtml(contentElement: HTMLElement): Blob {
  try {
    console.log("Starting HTML export...")

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Exported Document</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #ffffff;
          }
          h1, h2, h3, h4, h5, h6 {
            margin-top: 1.5em;
            margin-bottom: 0.5em;
            color: #2ECC71;
          }
          p {
            margin-bottom: 1em;
          }
          table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 1em;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 8px;
          }
          th {
            background-color: #f2f2f2;
          }
          footer {
            margin-top: 40px;
            text-align: center;
            font-size: 12px;
            color: #999;
          }
        </style>
      </head>
      <body>
        ${contentElement.innerHTML}
        <footer>Generated by docfa.st</footer>
      </body>
      </html>
    `

    console.log("HTML export created successfully")
    return new Blob([html], { type: "text/html" })
  } catch (error) {
    console.error("Error in HTML generation:", error)
    throw error
  }
}

// Simple text-based DOCX alternative
export function generateTextDocument(contentElement: HTMLElement): Blob {
  try {
    console.log("Starting text document export...")

    // Extract text content
    const text = contentElement.innerText || contentElement.textContent || ""

    console.log("Text document created successfully")
    return new Blob([text], { type: "text/plain" })
  } catch (error) {
    console.error("Error in text document generation:", error)
    throw error
  }
}

// Direct print function
export function printDocument(contentElement: HTMLElement): void {
  try {
    console.log("Opening print window...")
    openPrintWindow(contentElement.innerHTML)
  } catch (error) {
    console.error("Error opening print window:", error)
    alert("Failed to open print window. Please try again.")
  }
}
